@page
@using Htmx.TagHelpers
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using TPOT_Links.Models
@model TPOT_Links.Pages.Comments.IndexModel
@{
}

<div class="flex flex-col items-center justify-center" x-data="setup_scrapes()">
    <section class="flex flex-col">
        <div x-bind:data-theme="autumn" class="flex hero bg-base-200">
            <div class="hero-content flex-col lg:flex-row-reverse">
                <div x-show="options.show_right_panel" width="420" height="746">
                    ...
                </div>

                <div>
                    <h1 x-text="message" class="text-5xl font-bold"></h1>
                    <p class="py-6 text-2xl">
                        Below are correspondences on Facebook we've kept copies of with
                        people who choose to block us or hide. For their sake, the sake of
                        those they interact with, and the for the Truth, we are keeping
                        their behavior recorded and exposed.
                    </p>

                    <b class="py-6 text-2xl">
                        To view one, simply click on a record, below. Then, download the
                        attachment by clicking on the
                        <svg width="16" height="16" viewBox="0 0 16 16" class="icon"
                             style="shape-rendering: geometricprecision">
                            <path fill-rule="nonzero" fill="currentColor"
                                  d="M8 2C7.86739 2 7.74021 2.05268 7.64645 2.14645C7.55268 2.24021 7.5 2.36739 7.5 2.5V8.29297L5.72852 6.52148C5.63475 6.42774 5.50759 6.37508 5.375 6.37508C5.24241 6.37508 5.11525 6.42774 5.02148 6.52148C4.92774 6.61525 4.87508 6.74241 4.87508 6.875C4.87508 7.00759 4.92774 7.13475 5.02148 7.22852L7.64648 9.85352C7.74024 9.94729 7.8674 9.99998 8 10C8.1326 9.99998 8.25976 9.94729 8.35352 9.85352L10.9785 7.22852C11.0723 7.13475 11.1249 7.00759 11.1249 6.875C11.1249 6.74241 11.0723 6.61525 10.9785 6.52148C10.8848 6.42774 10.7576 6.37508 10.625 6.37508C10.4924 6.37508 10.3652 6.42774 10.2715 6.52148L8.5 8.29297V2.5C8.5 2.36739 8.44732 2.24021 8.35355 2.14645C8.25979 2.05268 8.13261 2 8 2Z M2.5 9C2.36739 9 2.24021 9.05268 2.14645 9.14645C2.05268 9.24021 2 9.36739 2 9.5V13C2.00007 13.5463 2.45357 13.9999 2.99988 14C2.99984 14 2.99992 14 2.99988 14H13C13.5464 14 14 13.5464 14 13V9.5C14 9.36739 13.9473 9.24021 13.8536 9.14645C13.7598 9.05268 13.6326 9 13.5 9C13.3674 9 13.2402 9.05268 13.1464 9.14645C13.0527 9.24021 13 9.36739 13 9.5V13H3.00012L3 9.5C3 9.36739 2.94732 9.24021 2.85355 9.14645C2.75979 9.05268 2.63261 9 2.5 9Z">
                                <path fill-rule="nonzero" fill="currentColor"
                                      d="M8 2C7.86739 2 7.74021 2.05268 7.64645 2.14645C7.55268 2.24021 7.5 2.36739 7.5 2.5V8.29297L5.72852 6.52148C5.63475 6.42774 5.50759 6.37508 5.375 6.37508C5.24241 6.37508 5.11525 6.42774 5.02148 6.52148C4.92774 6.61525 4.87508 6.74241 4.87508 6.875C4.87508 7.00759 4.92774 7.13475 5.02148 7.22852L7.64648 9.85352C7.74024 9.94729 7.8674 9.99998 8 10C8.1326 9.99998 8.25976 9.94729 8.35352 9.85352L10.9785 7.22852C11.0723 7.13475 11.1249 7.00759 11.1249 6.875C11.1249 6.74241 11.0723 6.61525 10.9785 6.52148C10.8848 6.42774 10.7576 6.37508 10.625 6.37508C10.4924 6.37508 10.3652 6.42774 10.2715 6.52148L8.5 8.29297V2.5C8.5 2.36739 8.44732 2.24021 8.35355 2.14645C8.25979 2.05268 8.13261 2 8 2Z M2.5 9C2.36739 9 2.24021 9.05268 2.14645 9.14645C2.05268 9.24021 2 9.36739 2 9.5V13C2.00007 13.5463 2.45357 13.9999 2.99988 14C2.99984 14 2.99992 14 2.99988 14H13C13.5464 14 14 13.5464 14 13V9.5C14 9.36739 13.9473 9.24021 13.8536 9.14645C13.7598 9.05268 13.6326 9 13.5 9C13.3674 9 13.2402 9.05268 13.1464 9.14645C13.0527 9.24021 13 9.36739 13 9.5V13H3.00012L3 9.5C3 9.36739 2.94732 9.24021 2.85355 9.14645C2.75979 9.05268 2.63261 9 2.5 9Z">
                                </path>
                            </path>
                        </svg>

                        Icon.
                    </b>

                    @* <a x-show="options.show_right_panel"> *@
                    @*     <button class="btn btn-primary">Go</button> *@
                    @* </a> *@

                    @* <a x-show="false"> *@
                    @*     <button x-on:click="options.show_comments_form=true" class="btn btn-primary" disabled> *@
                    @*         Request Facebook Scrape *@
                    @*     </button> *@
                    @* </a> *@



                    @* <template x-if="options.show_comments"> *@
                    @*     <div> *@
                    @*         <iframe class="airtable-embed w-screen h-screen" *@
                    @*                 src="https://airtable.com/embed/shrcEu7hD1TmBFPwN?backgroundColor=purple&layout=card&viewControls=on" *@
                    @*                 frameborder="0" onmousewheel=""> *@
                    @*         </iframe> *@
                    @* *@
                    @*     </div> *@
                    @* </template> *@
                </div>
            </div>

            @* <partial name="ScrapesOptionsPanel" model="new ScrapeOptions()" /> *@

        </div>
    </section>

    <partial name="ScrapeOptions" model="new ScrapeOptions()"/>

    <partial name="ScrapesFromAirtable"/>
    rm
</div>

<script>
    const without_underscores = (h) => h.replace(/_/gi, " ");
    const labels = Array.from({
        length: 900
    }, (_, index) => index + 20);
    const data = {
        datasets: [{
                label: "Velocity [fps]",
                data: [{
                        x: 0,
                        y: 1060
                    },
                    {
                        x: 100,
                        y: 1013
                    },
                    {
                        x: 200,
                        y: 977
                    },
                    {
                        x: 300,
                        y: 944
                    },
                    {
                        x: 400,
                        y: 914
                    },
                ],
                borderColor: "rgb(0, 192, 0)",
                backgroundColor: "rgb(0, 192, 0, 0.5)",
                yAxisID: "y",
                showLine: true,
            },
            {
                label: "Energy [ft.lb]",
                data: [{
                        x: 0,
                        y: 499
                    },
                    {
                        x: 100,
                        y: 456
                    },
                    {
                        x: 200,
                        y: 424
                    },
                    {
                        x: 300,
                        y: 396
                    },
                    {
                        x: 400,
                        y: 370
                    },
                ],
                borderColor: "rgb(192, 0, 75)",
                backgroundColor: "rgb(192, 0, 75, .5)",
                yAxisID: "y2",
                showLine: true,
            },
            {
                label: "Points of Impact (POI) [in]",
                data: [{
                        x: 50,
                        y: 3.1
                    },
                    {
                        x: 100,
                        y: 0.0
                    },
                    {
                        x: 200,
                        y: -31.8
                    },
                    {
                        x: 300,
                        y: -100.1
                    },
                    {
                        x: 400,
                        y: -207.4
                    },
                ],
                borderColor: "rgb(192, 192, 75)",
                backgroundColor: "rgb(192, 192, 75, 0.5)",
                yAxisID: "y3",
                showLine: true,
                text: "YO",
            },
        ],
    };
    const config = {
        type: "scatter",
        data: data,
        options: {
            scales: {
                // x: {beginAtZero :true},
                // y: {beginAtZero :true}
            },
        },
    };
    document.addEventListener("DOMContentLoaded", (event) => {
        var ctx = document.getElementById("lineChart");
        var lineChart = new Chart(ctx, config);
    });
</script>
@* *@
@* <script> *@
@*     const months = [ *@
@*         "January", *@
@*         "February", *@
@*         "March", *@
@*         "April", *@
@*         "May", *@
@*         "June", *@
@*         "July", *@
@*         "August", *@
@*         "September", *@
@*         "October", *@
@*         "November", *@
@*         "December", *@
@*     ]; *@
@*     const bar_labels = Array.from({ *@
@*             length: 7 *@
@*         }, *@
@*         (_, index) => months[index] || index *@
@*     ); *@
@*     const bar_data = { *@
@*         labels: bar_labels, *@
@*         datasets: [{ *@
@*             label: "Votes", *@
@*             data: [65, 59, 80, 81, 56, 55, 40], *@
@*             backgroundColor: Array.from({ *@
@*                     length: 7 *@
@*                 }, *@
@*                 () => "rgba(153, 102, 255, 0.2)" *@
@*             ), *@
@*             borderColor: Array.from({ *@
@*                 length: 7 *@
@*             }, (_) => "rgb(54, 162, 235)"), *@
@*             borderWidth: 1, *@
@*         }, ], *@
@*     }; *@
@*     const bar_config = { *@
@*         type: "bar", *@
@*         data: bar_data, *@
@*         options: { *@
@*             scales: { *@
@*                 y: { *@
@*                     beginAtZero: true, *@
@*                 }, *@
@*             }, *@
@*         }, *@
@*     }; *@
@*     document.addEventListener("DOMContentLoaded", (event) => { *@
@*         var ctx = document.getElementById("barChart"); *@
@*         var barChart = new Chart(ctx, bar_config); *@
@*     }); *@
@* </script> *@

<script>
    let is_number = (n) => (isNaN(n) ? 0 : n);
    // let is_not_number = n => isNaN(!n) ? 0 : n
    const round_to = (n, d) =>
        Math.round(n * Math.pow(10, d)) / Math.pow(10, d);

    function tenths_place(value) {
        return round_to(value % 10, 0);
    }
    const all_view_panels = [{
            label: "4-Panels",
            columns: 2,
            rows: 2,
            d: "M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z",
        },
        {
            label: "6-Panels",
            columns: 3,
            rows: 2,
            d: "M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6",
        },
        {
            label: "Irregular",
            d: "M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z",
        },
    ];

    function setup_scrapes() {
        return {
            theme: "forest",
            view_index: 1,
            sales: [{
                    manufacturer: "ACME Labs",
                    monthly_sales: 1200.2,
                    last_product_launch: "04/1/23",
                },
                {
                    manufacturer: "Bob's Outfitters",
                    monthly_sales: 2500.98,
                    last_product_launch: "04/25/23",
                },
                {
                    manufacturer: "Optics Planet",
                    monthly_sales: 30000.0011,
                    last_product_launch: "05/11/22",
                },
                {
                    manufacturer: "TA Targets",
                    monthly_sales: 135.45,
                    last_product_launch: "04/1/23",
                },
                {
                    manufacturer: "Daniel Defense",
                    monthly_sales: 7000.123,
                    last_product_launch: "04/25/23",
                },
                {
                    manufacturer: "TNVC Night Vision",
                    monthly_sales: 80500.999,
                    last_product_launch: "05/11/22",
                },
            ],
            get message() {
                return "Welcome!";
            },
            get total_sales() {
                let total = this.sales.reduce(
                    (partialSum, a) => partialSum + a.monthly_sales,
                    0.0
                );
                let decimals = tenths_place(total) - 2;
                let rounded_total = round_to(total, decimals);
                console.log("decimals :>> ", decimals);
                console.log("rounded_total :>> ", rounded_total);
                return `$${rounded_total}`;
            },
            get selected_view() {
                return all_view_panels[this.view_index];
            },
            get grid_class() {
                return `grid grid-cols-1 lg:grid-cols-${this.selected_view.columns} lg:grid-rows-${this.selected_view.rows}`;
            },
        };
    }
</script>